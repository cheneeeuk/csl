流程控制

顺序结构 --- 指代码是从上到下从左到右依次编译执行的
	
分支结构
	判断结构
		if(判断条件){
			code;
		}
		
		if(){
			code1;
		}else{
			code2;
		}
		
		练习:
			1.获取2/3个数中的较大值
			2.输入一个分数,输出等级
				获取2个数中的最大值
					int a=2,b=1,c=3;
					int max;
					if(a>b){
						max = a;
					}else{
						max = b;
					}
				获取3个数中的最大值
				(1)
					if(a>b){
						if(a>c){
							max = a;
						}else{
							max = c;
						}
					}else{
						if(b>c){
							max = b;
						}else{
							max = c;
						}
					}
				(2)	
					int max = a;
					
					if(max < b){
						max = b;
					}
					if(max < c){
						max = c;
					}
			double score = 90;
			char lv = 'E';
			if(score >= 60){
				lv = 'D';
			}
			if(score >= 70){
				lv = 'C';
			}
			if(score >= 80){
				lv = 'B';
			}
			if(score >= 90){
				lv = 'A';
			}
			
		if(判断条件){
			code1;
		}else if(判断条件2){
			code2;
		}else if(判断条件3){
			code3;
		}...
		
		练习:
			1.输入一个数字表示月份,输出这个月份对应的季节 3-5 春 6-8 夏 9-11秋 12-2冬
			2.输入一个数字表示星期,输出这个数字所对应的英文
				1-Monday 2-Tuesday 3.Wednesday 4-Thursday 5-Friday 6-Saturday 7-Sunday
			
			Scanner s = new Scanner(System.in);		
			int month = s.nextInt();
			String jijie = "";
			if(month >12 || month < 1){
				System.out.println("非法月份!!!");
				return;
			}else if(month>=3 && month <=5){
				jijie = "春";
			}else if(month>=6 && month <= 8){
				jijie = "夏";
			}else if(month>=9 && month <=11){
				jijie = "秋";
			}else if(month==12 || month==1 || month==2){
				jijie = "冬";
			}
			System.out.println(jijie);
			
			
			Scanner s = new Scanner(System.in);		
			int day = s.nextInt();
			if(day == 1){
				System.out.println("Monday");
			}else if(day == 2){
				System.out.println("Tuesday");
			}else if(day == 3){
				System.out.println("Wednesday");
			}else if(day == 4){
				System.out.println("Thursday");
			}else if(day == 5){
				System.out.println("Friday");
			}else if(day == 6){
				System.out.println("Saturday");
			}else if(day == 7){
				System.out.println("Sunday");
			}else{
				System.out.println("非法日期!!!");
			}
	选择结构
		switch(选项){
			case 情况1:code1;break;
			case 情况2:code2;break;
			case 情况3:code3;break;
			...
			default:code4;break;(以上条件都不符合 走default)
		}
		
		switch的()内需要添加一个选项,这个选项要求是byte/short/char/int,只能是这四种类型
		
		注意:	JDK1.7开始允许使用String
	
	如果case没有break 代码会从匹配的选项开始一直往下执行 直到遇到了break结束
	
	如果每一个case后面都有break 则case的顺序不影响结果 
	
	如果有一个或多个case没有break则case的顺序影响结果
	
	练习:
		输入一个符号(+ - * /),以及两个数字,根据符号运算这两个数字
		
		输入3个数字 分别表示年月日 输出这一年到这一天一共有多少天
		int year,month,day;
		1.判断平年闰年
		2.1月份直接加天数 
			1-2 31天
			2-3 28
			3-4 31
			4-5
			5-6
			6-7
			7-8
			8-9
			9-10
			10-11
			11-12
			12月前面的加当前日期
			
			switch(month-1){
				case 11:30;
				case 10:31;
				case 9:30;
				case 8:31;
				case 7:31;
				case 6:30;
				case 5:31;
				case 4:30;
				case 3:31;
				case 2:28;
				case 1:31;
			}
		

循环结构
	有一些相同/相似的代码需要重复执行,用的就是循环结构
	
	while(逻辑值){
		code;
	}
	执行顺序:先判断逻辑值是否为true,如果为true,执行code
		       执行完成code再次判断逻辑值是否成立 
		       直到逻辑值为false的时候循环结束
		       
	练习:
		1.输出200以内所有的7的倍数
		2.输出100以内所有的能被3整除而不能被7整除的数字
		3.输入一个数字,判断这个数字是一个几位数
		4.输入一个数字,求这个数字的各位上的数字的和
			int num = 75235;
			int sum = 0;
			while(num > 0){
				sum += num % 10;
				num /= 10;
			}
		5.输入正整数 然后将这个数字转化为二进制形式(字符串)来展现
		
	do{
		code;
	}while(逻辑值);
	特点:代码块无论如何至少要执行一次
	

	for循环
	//for循环的中间判断条件如果不写 默认为true
	for(定义循环变量;控制条件;改变循环变量){
		code;
	}
	
	练习:
		1.输入一个整数,(Java中整数默认为int,并且存储形式是以补码形式存储),统计这个补码中有多少个1
		
		     对于负数,取反之后有几个零就表示这个数的补码有几个1
		     
		  例如: -13 取反为 12
		  		00000000  00000000  00000000	00001100  -->12的补码
				11111111  11111111	11111111	11110011  -->取反得到-13的补码	     
		2.打印九九乘法表
			1*1=1
			1*2=2 2*2=4
			1*3=3 2*3=6 3*3=9
		3.试着打印
			******
			*****
			****
			***
			**
			*
		4.三天打鱼两天晒网
			  2000.1.1开始
			      到2018.6.4是在打鱼还是晒网


















