复习:
1.break和continue:break能用于选择或者是循环结构,表示终止当前一层结构,
  continue只能用于循环结构,表示跳出本次循环继续下一次
2.数组:用于存储多个同一类型的数据的容器,大小固定

数组的应用
	数组的排序
	
		冒泡排序:相邻两个元素依次比较,如果是升序排序且前一个元素大于后一个元素,需要交换位置 --- 时间复杂度是O(n^2)
																  --- 空间复杂度是o(1)				
		选择排序:选定一位 依次跟其他位比较
		
		Arrays.sort(数组); --- 只能进行升序排序 --- 快速排序 --- O(nlogn)
	
	数组的反转 --- 头尾互换
	
	获取数组指定元素的下标 --- 如果数组无序 可以使用遍历的方式查找
				 --- 若数组是有序的 可以使用折半/二分查找 --- 时间复杂度O(logn) 空间复杂度o(1)
				 
	数组的复制
		System.arraycopy(要复制的数组,要复制的起始下标,要存放的数组,要存放的起始下标,要复制的元素个数);
		
		Arrays.copyOf(数组,扩容之后的长度);		
	
二维数组
	数据类型[][] 数组名 = new 数据类型[二维数组的大小][一维数组的大小]			 
	
	int[][] arr = new int[3][5]; --- 表示定义了一个能存储3个一维数组的二维数组,每一个一维数组中能存储5个整型元素
	
	数据类型[][] 数组名 = new 数据类型[二维数组大小][];
	
	int[][] arr = new int[5][]; --- 表示这个二维数组中能存储5个一维数组
	
	数据类型[][] 数组名 = {{数组1},{数组2},{数组3} ...};
	
思考题 :
	1.一维数组中无序存放了1~n中的n-1个数,如何找到这1个没有放到数组中的数 --- O(n) o(1)
	
		利用求和先将1~n个数求和,最后减去n-1个数即得到每放入数组的那个数
		
	2.一组数字,除了其中的一个元素以外,其余的元素都出现了偶数次,只有一个元素出现了奇数次,找到这个出现了奇数次的元素 --- O(n) o(1)
	
		利用异或运算符,相同两个数异或为0,任意数异或0还是它本身
		
练习题:
	1.猴子选大王:有15只猴子围城了一圈选大王,每只猴子依次报数,报到7的猴子就被淘汰,剩余1只猴子,那么这只猴子就是大王
		--- 这只成为大王的猴子是第几只	
		
	2.杨辉三角
	  1
	  1  1
	  1  2  1
	  1  3  3  1
	  1  4  6  4  1
	  1  5  10 10 5  1	
	  输入一个数字,输出对应行数的杨辉三角
	  打印前n行
	  
方法
	将要重复使用的逻辑或者是代码提取出来写成一个新的形势 --- 方法	  
	
	修饰符 返回值类型 方法名(参数列表){
		方法体;
		return 返回值;
	}
	
	方法如果没有返回值 就将返回值类型定义为void
	
	方法的返回值类型是void 是否意味着这个方法中不能写return语句 --- 可以return;
	
	方法的定义过程需要明确返回值类型,明确参数  
练习:
	1.哥德巴赫猜想:任何一个大于等于6的偶数都可以分解成两个质数之和
		输入一个数字,输出这个数字的所有分解形式
			
	2.亲密数:如果A的所有因子(不含本身)之和等于B 而B的所有因子(不含本身)之和等于A 那么A和B就是一对亲密数 
	  --- 输出5000以内所有的亲密数
	

	
	
	
	
	
	
	
	