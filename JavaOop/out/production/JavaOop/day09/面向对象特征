继承
    对一部分的类进行分析,将这些类中共有的属性和方法提取到了一个新的类中,

    然后利用extends关键字让原来的类和新的类产生了关系,这种关系称之为继承.

    ---子类在继承父类之后可以使用父类中的一部分方法和属性

    在Java中,支持单继承,支持多层继承---一个子类只能继承一个父类,但是一个父类可以有多个子类

    单继承和多继承的比较:

        在代码的复用性上,多继承要优于单继承

        多继承缺点:

            若继承多个类存在方法签名一致的方法,调用的时候会产生歧义

            例如:
                class A{
                    public int m(){
                        return 1;
                    }
                }

                class B{
                    public boolean m(){
                        return true;
                    }
                }

                若C类继承A,B 此时调用m方法会产生歧义

        所以单继承在调用方法的明确度上要优于多继承

        单继承的好处:提高代码的复用性,避免方法调用的时候产生歧义

    注意:子类在继承父类的时候能够继承父类所有的属性和方法,但是只有一部分方法和属性对子类可见

super关键字

    表示父类对象的引用,通过super可以在子类中调用父类的方法和属性

    super语句---表示在子类中调用父类对应形式的构造方法来创建一个父类对象,创建好的父类对象用super表示

    super语句必须写在子类构造方法中的第一行

    每创建一个子类对象都会伴随着创建一个父类对象

    super语句和this语句能共存吗?---不能

    练习:
        1.定义一个类表示矩形(Rectangle),提供获取这个矩形周长和面积的方法

          提供一个子类表示正方形

    protected

    考虑:在子类中使用和子类对象使用是一回事儿吗?---不是一回事

方法的重写

    在父子类中存在了方法签名一致的非静态方法,就称之为是方法的重写/覆盖

    方法在重写的过程中需要遵守5个原则

        "两等两小一大"

        1.方法签名相同

        2.子类重写的方法的权限修饰符的范围要大于等于父类权限修饰符的范围

        3.如果父类方法的返回值类型是基本类型/void,那么子类在重写方法的时候要求返回值类型一致

        4.如果父类方法的返回值类型是引用类型,那么子类重写的方法的返回值类型和父类方法的返回值类型一致或者是父类方法返回值类型的子类

多态
    编译时多态:

        方法的重载

    运行时多态:

        向上造型和方法的重写---基于继承

    注意:

        如果是利用向上造型来创建的对象,那么这个对象能干什么看的是父类,怎么干看的是子类

重写的理解

    注意:在Java中基本类型之间是没有继承关系的

static---静态

    修饰变量,方法,内部类以及代码块

    静态变量

        static修饰的变量称之为静态变量/类变量

        静态变量是随着类的加载而加载到方法区,并且在方法区中被赋予了默认值

        由于静态变量是优先于对象出来的,所以可以不通过对象而是通过类名来调用静态变量

        每一个对象存的都是这个静态变量所对应的地址,所以静态变量是被这个类的所有对象所共享的

    注意:
        1.类在内存中是存储在方法区

        2.类在第一次使用的时候才会加载

        静态变量可以在方法中定义吗?---不可以---方法在调用的时候执行,到栈内存中执行;静态变量在类加载的时候初始化,存储在方法区

        静态变量可以在构造代码块中定义吗?---不可以---构造代码块在创建对象的时候执行,在栈内存中执行;静态变量先于对象出现,存储在方法区

    练习:
        1.统计这个类创建的对象的个数








