数组
	存储多个同一类型的数据 --- 容器 --- 大小固定
	
	数组对放入其中的元素进行编号,编号是从0开始的 --- 下标
	
定义格式
	(1)数据类型[] 数组名 = new 数据类型[数组的大小]; --- 动态初始化	
	
		int[] arr = new int[5]; --- 表示定义了一个能存储5个整型元素的数组
		
		arr[2] = 10;//表示向数组arr的下标为2的位置上放入元素10
		
		int i = arr[2];
	
	(2)数据类型[] 数组名 = new 数据类型[]{元素1,元素2,元素3 ...}; --- 静态初始化
	
		int[] arr = new int[]{2,1,5,3,7}; --- 表示定义了一个元素类型是int的数组 
		
		并且数组中的元素是2,1,5,3,7 --- 当给定了元素的时候,也就同时规定了数组的大小为5; 
		
	(3)数据类型[] 数组名 = {元素1,元素2,元素3 ...};	
	
		int[] arr = {2,4,1,7,8,3}; --- 数组的大小是6
		
	当使用的下标超过了数组的最大下标的时候就会出现
	
	java.lang.ArrayIndexOutOfBoundsException --- 数组下标越界异常
	
	在数组定义的时候 []可以在数组名之前也可以在数组名之后
	
	但是[]在数组名之前,那么声明的所有的变量实际上都是数组
	
	如果在数组名之后只规定当前的变量是一个数组不影响其他的变量
	
内存
	Java将所占用的内存划分为了5块:
		栈内存:
			用于存储变量
			变量在定义之后会在栈内存中占用一块空间
			如果在程序中给变量赋值,才会在占内存的对应空间中保存这个值,这个变量用完以后会立即移除出栈内存
		堆内存:
			存储的是对象(数组也是一种对象) 堆内存会对存入其中的元素赋予一个默认值
				byte/short/int-0
				long-0L
				float-0.0f
				double-0.0
				char-'\u0000'(表示一个空字符)
				boolean-false
			除了这八种基本类型之外其他类型的默认值都是null
			当存入堆内存的对象使用完成之后,不会立即移除出堆内存而是在不定的某个时刻被释放
		方法区
		本地方法栈(主要用于跟其他语言交互)
		pc计数器(寄存器)	
		
数组的应用
1.获取数组的元素 --- 数组名[下标]		

2.获取数组的长度 --- 数组名.length

3.遍历数组
	//方式一:普通for循环
	//方式二:增强for循环 只能遍历不能改变数组中的元素
		int[] arr = new int[5];
		for(int i : arr){
			System.out.println(i);
		}
	//方式三:利用Arrays
		Arrays.toString(arr);	
		
4.获取数组中的最值
5.对数组元素进行排序 --- 升序排列	
	时间复杂度:找到这个程序中会重复执行的这段代码 把重复的这段代码执行的时间认为成单位1 
		           执行这个单位1的次数就是时间复杂度 --- 时间复杂度计算的时候一定是找的这个表达式的最高阶
		           找到最高阶之后 不考虑系数
		           时间复杂度用O() --- 对于时间复杂度而言一定满足一下几种形式:	
		    	n^x,(logn)^x,n^x(logn)^y
	空间复杂度:这段代码在执行过程中需要额外花费的变量的空间的个数 --- 空间复杂度表现形式和时间复杂度一样
			表现形式和时间复杂度一样 --- 空间复杂度用o()表示//小写字母o
			3=3*n^0 --- o(n^0) --- o(1)	
		
	注意:时间复杂度表示了代码被重复执行的次数
	          空间复杂度表示了这段代码执行需要耗费的内存大小
	          
预习:
	选择排序
	
	二分查找        
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		